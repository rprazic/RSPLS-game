services:
  game-service.api:
    image: game-service.api
    build:
      context: .
      dockerfile: GameService.Api/Dockerfile
    ports:
      - "6000:80"
      - "6001:443"
    environment:
      - ASPNETCORE_Kestrel__Certificates__Default__Password=some.long.password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/app/Certificates/aspnetapp.pfx
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - ConnectionStrings__DefaultConnection=Host=db;Database=game-db;Port=5433;Username=game-user;Password=:/d529o{0Un~
      - AuthSettings__ApiKey=2!pf629B(Nmf
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ./logs:/app/logs
    networks:
      - game-network

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=game-db
      - POSTGRES_USER=game-user
      - POSTGRES_PASSWORD=:/d529o{0Un~
      - PGPORT=5433
    ports:
      - "5433:5433"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U game-user -d game-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - game-network

  game-app:
    build:
      context: ../game-app
      dockerfile: ../game-app/Dockerfile
    ports:
      - "80:80"
    environment:
      - REACT_APP_API_URL=https://localhost:6001
    depends_on:
      - game-service.api
    restart: unless-stopped
    networks:
      - game-network

volumes:
  postgres_data:
    
networks:
  game-network:
    driver: bridge